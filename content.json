{"pages":[{"title":"Standing on the Shoulder of Giants","text":"动漫剪辑编程","link":"/about/index.html"}],"posts":[{"title":"css记录问题","text":"问题：适配不同分辨率的屏幕？ 媒体查询+百分比=栅格化 问题：让浮动元素不脱离父元素？ 在父元素清除浮动 问题：怎么最方便的使元素居中？ line-height属性只对行内元素生效，(行高-字体大小)/2=上边距=下边距 问题：父元素里有两个不同的字体 ，一个为20，一个为14，行高设为80，我想设置为元素总高为80，实际却为83，结果显示20字体元素的上下边距为30，14字体元素的上下边距为33。怎么使14字体不干扰呢？ 在14字体包裹的元素中在设置一个行高，就设置line-height：14px；将解决干扰。","link":"/2019/09/15/css记录/"},{"title":"关于json的联系","text":"前因：有个需求json格式的多条数据，所以今天在公司里做一个Array bb = [{name，age}，{name，age}]这样的数据类型,我通过调用arrayObject.push(newelement1，newelement2，….，newelementX)，来进行数据填充。在console台中非常完美的显示出来了，但是在进行表单提交数据到服务器的时候，数据的格式非常奇怪。 这里我举一个例子 shuzu = []，key ：value格式。shuzu ： bb 这时候上传的数据格式应该是shuzhu: [[0],[1],....,[X]],可是在数据被服务器拒绝。 经过排查，在http报文请求参数Form Data发现数据格式为shuzhu[0].name,shu[0].age,shu[1],name.shuzu[1].age 理想情况name和age属性应该一个值，而不应该是分散的。 出现这个问题因为我没有做json的序列化。 数组中的js对象没做序列化 [object,object] 做序列化： bb = &apos;[[0],[1],....,[X]]&apos; shuzu ：bb所以这里我要提到序列化的知识。 序列化是什么？ 百科的解释：序列化 (Serialization)是将对象的状态信息转换为可以存储或传输的形式的过程。 基本上所有的语言都有序列化对象的方法。“字符串”对于服务器端来说不管哪种语言都是可以识别的。 若作为网络的传输就是将js对象转换为字节流，将字节流转换回js对象 为什么要序列化呢？ 网络数据传输，可以直接发送字符串，但不能直接发送一个结构体。 网络上传输数据，因为发送端和接收端，通常不能保证是两边是相同的编程语言， 直接将结构体的数据整理成流发送过去，数据排序或者长度会跟你想象的不一样。序列化有什么作用呢？ 1.以某种存储形式使自定义对象持久化； 2.将对象从一个地方传递到另一个地方，序列化确实可以很好的跨语言平台 3.使程序更具维护性。通常的解决办法： 约定一个协议，协议规定好数据流中每个字节的含义。 发送端要保证按照协议要求组装好数据流。 接收端按照协议规定读取出里面的数据（解析）。通过上面序列化的概念，我们在回到JSON(JavaScript Object Notation)这个来讨论，json是一种轻量级的数据交换格式。 通过把任何JavaScript对象变成JSON，就是把这个对象序列化成一个JSON格式的字符串，这样才能够通过网络传递给其他计算机。 如果收到一个JSON格式的字符串，只需要把它反序列化成一个JavaScript对象，就可以在JavaScript中直接使用这个对象了。javascript内置了序列化函数JSON.stringify(),和反序列函数JSON.parse()1.JSON.stringify()示例 var xiaoming = { name: &apos;小明&apos;, age: 14, gender: true, height: 1.65, grade: null, &apos;middle-school&apos;: &apos;\\&quot;W3C\\&quot; Middle School&apos;, skills: [&apos;JavaScript&apos;, &apos;Java&apos;, &apos;Python&apos;, &apos;Lisp&apos;] }; var s = JSON.stringify(xiaoming); //&apos;{&quot;name&quot;:&quot;小明&quot;,&quot;age&quot;:14,&quot;gender&quot;:true,&quot;height&quot;:1.65,&quot;grade&quot;:null,&quot;middle-school&quot;:&quot;\\&quot;W3C\\&quot; Middle School&quot;,&quot;skills&quot;:[&quot;JavaScript&quot;,&quot;Java&quot;,&quot;Python&quot;,&quot;Lisp&quot;]}&apos;2.JSON.parse()示例 JSON.parse(&apos;[1,2,3,true]&apos;); // [1, 2, 3, true] JSON.parse(&apos;{&quot;name&quot;:&quot;小明&quot;,&quot;age&quot;:14}&apos;); // Object {name: &apos;小明&apos;, age: 14} JSON.parse(&apos;true&apos;); // true JSON.parse(&apos;123.45&apos;); // 123.45使用场景1.向后台传递参数、接收后台返回值 如果后台返回的是一个String（Object序列化后返回），那么需要在js中使用parse转化为Object再使用； 如果返回的时候传递了类型，比如就是Object，那么直接使用就好2.在页面间传递数据，特别是数组时 需要使用序列化，否则IE会报错：不能执行已经释放Script的代码3.在进行本地存储时 存储在本地window.localStorage.setItem(key,value)存储的value是json序列化的字符串； 获取得到的window.localSorage.getItem(key)也是json序列化的字符串，需要经过json的反序列化进行使用（常见json序列化数组）额外知识点 类型 toString Object 返回”[object Object]” stringObject 返回字符串 NumberObject 把一个 Number 对象转换为一个字符串，并返回结果。 booleanObject 把一个逻辑值转换为字符串，并返回结果。 arrayObject 把数组转换为字符串，用逗号间隔，并返回结果 dateObject 把 Date 对象转换为字符串，并返回结果 自定义对象调用js 的 toString 方法，返回的不是对象序列化后的字符串，而是 [object Object] 字符串。这是因为自定义对象没有重写 toString 方法。 通过记录工作上的问题，学习知识，本文章的知识点来自网络上的各位前辈，仅作学习记录参考，感谢前辈们。更多帮助请参考廖雪峰","link":"/2019/09/17/关于json的联系/"},{"title":"git推送遇到的问题","text":"github无法推送的原因 该分支与远程从分支无相关联系 没给该分支设置上游远程节点 git branch --set-upstream-to=&lt;远程主机名&gt;/&lt;远程分支名&gt; &lt;本地分支名&gt; git的更新操作如果本地与远程大部分不一样，有合并冲突，需要先拉取合并，才能进行推送本地分支名与远程分支名的特殊情况 1.本地分支名与远程分支名不同时候 git push &lt;远程主机名&gt; &lt;本地分支名&gt;：&lt;远程分支名&gt; 若加-f 则强行本地覆盖2.本地分支名和远程分支名相同时候如果远程分支被省略，如上则表示将本地分支推送到与之存在追踪关系的远程分支（通常两者同名），如果该远程分支不存在，则会被新建 git push &lt;远程主机名&gt; &lt;本地分支名&gt; tip：省略本地分支名，则表示删除指定的远程分支 git push origin ：&lt;远程分支名&gt; git push origin","link":"/2019/09/15/git推送遇到的问题/"},{"title":"Git的常用命令","text":"git上传常用命令的基本流程 git init //初始化git仓库 git add . //将文件提交到暂存区 git commit -m &apos;说明&apos; git remote add [本地自定义远程仓库名] [远程仓库url] //建立远程仓库 git push &lt;远程主机名&gt; &lt;本地分支名&gt;:&lt;远程分支名&gt;拉取并合并 git pull &lt;远程主机名&gt; &lt;远程分支名&gt;:&lt;本地分支名&gt; git pull=git fetch +git merge 推送 git push -u origin master //第一次将本地仓库推送到远程仓库 git push &lt;远程主机名&gt; &lt;本地分支名&gt;:&lt;远程分支名&gt;总结 git pull/push &lt;远程主机名&gt; &lt;源地址&gt;:&lt;目的地址&gt;常用吗命令 git ls-files //查看暂存区文件 git diff //查看暂存区前后不同 git branch 分支名 //创建新的分支 git branch //查看分支 git branch -r //查看远程的分支名 git branch --set-upstream-to=&lt;远程主机名&gt;/&lt;远程分支名&gt; &lt;本地分支名&gt; //给该分支设置上游远程节点 git checkout -b 分支名 //创建新的分支并切换过去 git checkout 分支名 //切换到该分支 git init //初始化git仓库 git add 文件名 //提交该文件 git add . //提交仓库所有文件 git commit -m &quot;注释&quot; //提交暂存区的文件到版本库 git remote add [本地自定义远程仓库名] [远程仓库url] //建立远程仓库 git clone &lt;远程仓库地址&gt; //克隆该仓库的默认分支 git clone -b 分支名 &lt;远程仓库地址&gt; //克隆指定的分支","link":"/2019/09/15/git的常用命令/"}],"tags":[{"name":"CSS","slug":"CSS","link":"/tags/CSS/"},{"name":"json，对象序列化","slug":"json，对象序列化","link":"/tags/json，对象序列化/"},{"name":"Git","slug":"Git","link":"/tags/Git/"}],"categories":[{"name":"CSS","slug":"CSS","link":"/categories/CSS/"},{"name":"javascript","slug":"javascript","link":"/categories/javascript/"},{"name":"Git","slug":"Git","link":"/categories/Git/"}]}